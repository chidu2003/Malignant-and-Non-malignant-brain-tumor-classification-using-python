import cv2
import face_recognition
import pandas as pd
from datetime import datetime

# Load known faces and names from a CSV file
data = pd.read_csv('known_faces.csv')
known_face_encodings = data['Encoding'].apply(lambda x: eval(x))
known_face_names = data['Name'].tolist()

# Initialize variables
attendance = {}

# Initialize video capture
video_capture = cv2.VideoCapture(0)

while True:
    # Capture frame-by-frame
    ret, frame = video_capture.read()

    # Convert frame to RGB for face recognition
    rgb_frame = frame[:, :, ::-1]

    # Find all the faces and their encodings in the current frame
    face_locations = face_recognition.face_locations(rgb_frame)
    face_encodings = face_recognition.face_encodings(rgb_frame, face_locations)

    # Initialize an empty list to store the names of recognized faces
    face_names = []

    for face_encoding in face_encodings:
        # Compare the current face encoding with the known face encodings
        matches = face_recognition.compare_faces(known_face_encodings, face_encoding)
        name = "Unknown"

        # Find the best match index
        face_distances = face_recognition.face_distance(known_face_encodings, face_encoding)
        best_match_index = face_distances.argmin()

        # If there is a match, assign the corresponding name
        if matches[best_match_index]:
            name = known_face_names[best_match_index]

        # Append the recognized name to the list
        face_names.append(name)

        # Mark attendance for the recognized person
        if name != "Unknown":
            if name in attendance:
                attendance[name] += 1
            else:
                attendance[name] = 1

    # Draw rectangles and display names on the frame
    for (top, right, bottom, left), name in zip(face_locations, face_names):
        cv2.rectangle(frame, (left, top), (right, bottom), (0, 0, 255), 2)
        cv2.putText(frame, name, (left, top - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 0, 255), 2)

    # Display the resulting frame
    cv2.imshow('Video', frame)

    # Exit loop if 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release video capture and close windows
video_capture.release()
cv2.destroyAllWindows()

# Save the attendance data to an Excel file with the current date
date_string = datetime.now().strftime('%Y-%m-%d')
filename = f'attendance_{date_string}.xlsx'

attendance_data = pd.DataFrame.from_dict(attendance, orient='index', columns=['Count'])
attendance_data.index.name = 'Name'
attendance_data.reset_index(inplace=True)
attendance_data['Timestamp'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
attendance_data.to_excel(filename, index=False)
